name: Build and Publish Docker image

on:
  push:
    branches:
      - main           # Only auto-build on push to main
    paths-ignore:      # Won't trigger workflow if only these files are edited
      - '.github/**'
      - 'assets/**'
      - '**/*.md'
      
  workflow_dispatch:   # Allow manual build for any branch

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag based on branch   # /refs/heads/main goes to 'latest', all others go to 'dev'
        id: tag
        run: |
          VERSION=$(jq -r .version app/package.json)
          BRANCH_NAME="${GITHUB_REF##*/}"
      
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "version_tag=v$VERSION" >> $GITHUB_OUTPUT
          else
            echo "tag=dev" >> $GITHUB_OUTPUT
            echo "version_tag=v$VERSION-dev" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }} \
            -t ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.version_tag }} \
            ./app

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}
          docker push ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.version_tag }}

      - name: Delete old dev images (keep latest only)
        if: ${{ steps.tag.outputs.tag == 'dev' }}
        env:
          GHCR_REPO: ghcr.io/${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IMAGE_NAME=$(basename $GHCR_REPO)
          USERNAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)
      
          curl -s -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/users/$USERNAME/packages/container/$IMAGE_NAME/versions \
            | jq -r '.[] | select(.metadata.container.tags[] | test("-dev$")) | select(.metadata.container.tags[] != "${{ steps.tag.outputs.version_tag }}") | .id' \
            | while read id; do
                echo "üóëÔ∏è Deleting old dev image version ID $id"
                curl -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
                  https://api.github.com/users/$USERNAME/packages/container/$IMAGE_NAME/versions/$id
              done

